
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author enta
 */
public class App extends javax.swing.JFrame {
    
    static ArrayList<Formando> osFormandos = new ArrayList<>();
    static ArrayList<Cursos> osCursos = new ArrayList<>();
    static ArrayList<Disciplinas> asDisciplinas = new ArrayList<>();
    static ArrayList<InscricaoFormando> asInsForm = new ArrayList<>();
    static ArrayList<InscricaoDisciplina> asInsDis = new ArrayList<>();

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        Janelas = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resFormando = new javax.swing.JTextArea();
        nomeFormando = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        altura = new javax.swing.JTextField();
        LimparFormando = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pais = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ano = new javax.swing.JTextField();
        AdicionarFormando = new javax.swing.JButton();
        RestaurarFormandos = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        ModificarFormando = new javax.swing.JButton();
        SelecionarIdFormando = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        EliminarFormando = new javax.swing.JButton();
        ListarFormandos = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        nomeCurso = new javax.swing.JTextField();
        HorasCurso = new javax.swing.JTextField();
        AdicionarCurso = new javax.swing.JButton();
        RestaurarCursos = new javax.swing.JButton();
        LimparCurso = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        resCurso = new javax.swing.JTextArea();
        ModificarCurso = new javax.swing.JButton();
        EliminarCurso = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        SelecionarIdCurso = new javax.swing.JSpinner();
        ListarCursos = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        nomeDisciplina = new javax.swing.JTextField();
        HorasDisciplina = new javax.swing.JTextField();
        AdicionarDisciplina = new javax.swing.JButton();
        RestaurarDisciplinas = new javax.swing.JButton();
        limparDisciplina = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        resDisciplina = new javax.swing.JTextArea();
        ModificarDisciplina = new javax.swing.JButton();
        EliminarDisciplina = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        SelecionarIdDisciplina = new javax.swing.JSpinner();
        ListarDisciplinas = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        resFormandoInscrever = new javax.swing.JTextArea();
        limparFormandoInscrever = new javax.swing.JButton();
        ListarCursosInscrever = new javax.swing.JButton();
        ListarFormandosInscritos = new javax.swing.JButton();
        ListarFormandosInscrever = new javax.swing.JButton();
        RestaurarInscricoesFormandos = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        SelecionarIdFormandoInscrever = new javax.swing.JSpinner();
        SelecionarIdCursoInscrever = new javax.swing.JSpinner();
        InscreverFormando = new javax.swing.JButton();
        EliminarFormandoInscricao = new javax.swing.JButton();
        SelecionarIdInscricao = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        EliminarDisciplinaInscricao = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        SelecionarIdDisciplinaInscrever = new javax.swing.JSpinner();
        SelecionarIdCursoInscrever1 = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        resDisciplinasInscrever = new javax.swing.JTextArea();
        RestaurarInscricoesDisciplinas = new javax.swing.JButton();
        limparDisciplinasInscrever = new javax.swing.JButton();
        SelecionarIdInscricao1 = new javax.swing.JSpinner();
        ListarCursosInscrever1 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        ListarDisciplinasInscritas = new javax.swing.JButton();
        ListarDisciplinasInscrever = new javax.swing.JButton();
        InscreverDisciplina = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resFormando.setEditable(false);
        resFormando.setColumns(20);
        resFormando.setRows(5);
        jScrollPane1.setViewportView(resFormando);

        nomeFormando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeFormandoActionPerformed(evt);
            }
        });

        jLabel4.setText("Altura:");

        altura.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        LimparFormando.setText("Limpar");
        LimparFormando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimparFormandoActionPerformed(evt);
            }
        });

        jLabel1.setText("Pa√≠s:");

        jLabel2.setText("Ano:");

        ano.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        AdicionarFormando.setText("Adicionar formando");
        AdicionarFormando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarFormandoActionPerformed(evt);
            }
        });

        RestaurarFormandos.setText("Restaurar formandos");
        RestaurarFormandos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestaurarFormandosActionPerformed(evt);
            }
        });

        jLabel3.setText("Nome:");

        ModificarFormando.setText("Modificar formando");
        ModificarFormando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarFormandoActionPerformed(evt);
            }
        });

        SelecionarIdFormando.setOpaque(false);
        SelecionarIdFormando.setValue(1);

        jLabel5.setText("ID do formando a modificar/eliminar:");

        EliminarFormando.setText("Eliminar formando");
        EliminarFormando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarFormandoActionPerformed(evt);
            }
        });

        ListarFormandos.setText("Listar formandos");
        ListarFormandos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarFormandosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LimparFormando)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(AdicionarFormando)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ModificarFormando)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EliminarFormando)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RestaurarFormandos, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelecionarIdFormando, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ListarFormandos)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(jLabel3)
                        .addComponent(jLabel2)
                        .addComponent(jLabel4))
                    .addGap(24, 24, 24)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(nomeFormando, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addComponent(pais)
                        .addComponent(altura)
                        .addComponent(ano, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                    .addContainerGap(383, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RestaurarFormandos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addComponent(ListarFormandos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AdicionarFormando)
                    .addComponent(ModificarFormando)
                    .addComponent(SelecionarIdFormando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(EliminarFormando))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LimparFormando)
                .addGap(7, 7, 7))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(nomeFormando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(5, 5, 5)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(pais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(ano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(altura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(295, Short.MAX_VALUE)))
        );

        Janelas.addTab("Formando", jPanel1);

        jLabel12.setText("Nome:");

        jLabel13.setText("Horas:");

        nomeCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeCursoActionPerformed(evt);
            }
        });

        AdicionarCurso.setText("Adicionar curso");
        AdicionarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarCursoActionPerformed(evt);
            }
        });

        RestaurarCursos.setText("Restaurar cursos");
        RestaurarCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestaurarCursosActionPerformed(evt);
            }
        });

        LimparCurso.setText("Limpar");
        LimparCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimparCursoActionPerformed(evt);
            }
        });

        resCurso.setEditable(false);
        resCurso.setColumns(20);
        resCurso.setRows(5);
        jScrollPane2.setViewportView(resCurso);

        ModificarCurso.setText("Modificar curso");
        ModificarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarCursoActionPerformed(evt);
            }
        });

        EliminarCurso.setText("Eliminar curso");
        EliminarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarCursoActionPerformed(evt);
            }
        });

        jLabel7.setText("ID do curso a modificar/eliminar:");

        SelecionarIdCurso.setOpaque(false);
        SelecionarIdCurso.setValue(1);

        ListarCursos.setText("Listar cursos");
        ListarCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarCursosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(LimparCurso)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(18, 18, 18)
                                        .addComponent(HorasCurso))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(nomeCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RestaurarCursos))
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(AdicionarCurso)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ModificarCurso)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EliminarCurso)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SelecionarIdCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ListarCursos)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(nomeCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RestaurarCursos))
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(HorasCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(ListarCursos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AdicionarCurso)
                    .addComponent(ModificarCurso)
                    .addComponent(EliminarCurso)
                    .addComponent(jLabel7)
                    .addComponent(SelecionarIdCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LimparCurso)
                .addContainerGap())
        );

        Janelas.addTab("Curso", jPanel4);

        jLabel14.setText("Nome:");

        jLabel15.setText("Horas:");

        AdicionarDisciplina.setText("Adicionar disciplina");
        AdicionarDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarDisciplinaActionPerformed(evt);
            }
        });

        RestaurarDisciplinas.setText("Restaurar disciplinas");
        RestaurarDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestaurarDisciplinasActionPerformed(evt);
            }
        });

        limparDisciplina.setText("Limpar");
        limparDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparDisciplinaActionPerformed(evt);
            }
        });

        resDisciplina.setEditable(false);
        resDisciplina.setColumns(20);
        resDisciplina.setRows(5);
        jScrollPane3.setViewportView(resDisciplina);

        ModificarDisciplina.setText("Modificar disciplina");
        ModificarDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarDisciplinaActionPerformed(evt);
            }
        });

        EliminarDisciplina.setText("Eliminar disciplina");
        EliminarDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarDisciplinaActionPerformed(evt);
            }
        });

        jLabel8.setText("ID da disciplina a modificar/eliminar:");

        SelecionarIdDisciplina.setOpaque(false);
        SelecionarIdDisciplina.setValue(1);

        ListarDisciplinas.setText("Listar disciplinas");
        ListarDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarDisciplinasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(limparDisciplina)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(HorasDisciplina))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(18, 18, 18)
                                        .addComponent(nomeDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RestaurarDisciplinas))
                            .addComponent(jScrollPane3)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(AdicionarDisciplina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ModificarDisciplina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EliminarDisciplina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SelecionarIdDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ListarDisciplinas)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(nomeDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RestaurarDisciplinas))
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(HorasDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(ListarDisciplinas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AdicionarDisciplina)
                    .addComponent(ModificarDisciplina)
                    .addComponent(EliminarDisciplina)
                    .addComponent(jLabel8)
                    .addComponent(SelecionarIdDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limparDisciplina)
                .addContainerGap())
        );

        Janelas.addTab("Disciplina", jPanel5);

        jLabel11.setText("ID do curso:");

        resFormandoInscrever.setEditable(false);
        resFormandoInscrever.setColumns(20);
        resFormandoInscrever.setRows(5);
        jScrollPane4.setViewportView(resFormandoInscrever);

        limparFormandoInscrever.setText("Limpar");
        limparFormandoInscrever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparFormandoInscreverActionPerformed(evt);
            }
        });

        ListarCursosInscrever.setText("Listar cursos");
        ListarCursosInscrever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarCursosInscreverActionPerformed(evt);
            }
        });

        ListarFormandosInscritos.setText("Listar formandos inscritos em cursos");
        ListarFormandosInscritos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarFormandosInscritosActionPerformed(evt);
            }
        });

        ListarFormandosInscrever.setText("Listar formandos");
        ListarFormandosInscrever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarFormandosInscreverActionPerformed(evt);
            }
        });

        RestaurarInscricoesFormandos.setText("Restaurar inscri√ß√µes de formandos");
        RestaurarInscricoesFormandos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestaurarInscricoesFormandosActionPerformed(evt);
            }
        });

        jLabel10.setText("ID do formando:");

        SelecionarIdFormandoInscrever.setOpaque(false);
        SelecionarIdFormandoInscrever.setValue(1);

        SelecionarIdCursoInscrever.setOpaque(false);
        SelecionarIdCursoInscrever.setValue(1);

        InscreverFormando.setText("Inscrever formando");
        InscreverFormando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InscreverFormandoActionPerformed(evt);
            }
        });

        EliminarFormandoInscricao.setText("Eliminar inscri√ß√£o");
        EliminarFormandoInscricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarFormandoInscricaoActionPerformed(evt);
            }
        });

        SelecionarIdInscricao.setOpaque(false);
        SelecionarIdInscricao.setValue(1);

        jLabel16.setText("ID da inscri√ß√£o:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SelecionarIdFormandoInscrever, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SelecionarIdCursoInscrever, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RestaurarInscricoesFormandos))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(InscreverFormando, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelecionarIdInscricao, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(EliminarFormandoInscricao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(ListarCursosInscrever)
                                .addGap(28, 28, 28)
                                .addComponent(ListarFormandosInscrever))
                            .addComponent(ListarFormandosInscritos)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(limparFormandoInscrever)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RestaurarInscricoesFormandos)
                    .addComponent(SelecionarIdFormandoInscrever, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelecionarIdCursoInscrever, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelecionarIdInscricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InscreverFormando)
                    .addComponent(EliminarFormandoInscricao)
                    .addComponent(ListarFormandosInscritos))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ListarCursosInscrever)
                    .addComponent(ListarFormandosInscrever))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limparFormandoInscrever)
                .addGap(260, 260, 260))
        );

        Janelas.addTab("Inscrever formando em curso", jPanel3);

        EliminarDisciplinaInscricao.setText("Eliminar disciplina de curso");
        EliminarDisciplinaInscricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarDisciplinaInscricaoActionPerformed(evt);
            }
        });

        jLabel17.setText("ID da disciplina:");

        SelecionarIdDisciplinaInscrever.setOpaque(false);
        SelecionarIdDisciplinaInscrever.setValue(1);

        SelecionarIdCursoInscrever1.setOpaque(false);
        SelecionarIdCursoInscrever1.setValue(1);

        jLabel18.setText("ID do curso:");

        resDisciplinasInscrever.setEditable(false);
        resDisciplinasInscrever.setColumns(20);
        resDisciplinasInscrever.setRows(5);
        jScrollPane5.setViewportView(resDisciplinasInscrever);

        RestaurarInscricoesDisciplinas.setText("Restaurar disciplinas de cursos");
        RestaurarInscricoesDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestaurarInscricoesDisciplinasActionPerformed(evt);
            }
        });

        limparDisciplinasInscrever.setText("Limpar");
        limparDisciplinasInscrever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparDisciplinasInscreverActionPerformed(evt);
            }
        });

        SelecionarIdInscricao1.setOpaque(false);
        SelecionarIdInscricao1.setValue(1);

        ListarCursosInscrever1.setText("Listar cursos");
        ListarCursosInscrever1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarCursosInscrever1ActionPerformed(evt);
            }
        });

        jLabel19.setText("ID da inscri√ß√£o:");

        ListarDisciplinasInscritas.setText("Listar disciplinas de cursos");
        ListarDisciplinasInscritas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarDisciplinasInscritasActionPerformed(evt);
            }
        });

        ListarDisciplinasInscrever.setText("Listar disciplinas");
        ListarDisciplinasInscrever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarDisciplinasInscreverActionPerformed(evt);
            }
        });

        InscreverDisciplina.setText("Adicionar disciplina a curso");
        InscreverDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InscreverDisciplinaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(limparDisciplinasInscrever)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(21, 21, 21)
                                .addComponent(SelecionarIdDisciplinaInscrever, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addComponent(jLabel18)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SelecionarIdCursoInscrever1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(InscreverDisciplina)))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(SelecionarIdInscricao1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(EliminarDisciplinaInscricao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(ListarCursosInscrever1)
                                        .addGap(28, 28, 28)
                                        .addComponent(ListarDisciplinasInscrever))
                                    .addComponent(ListarDisciplinasInscritas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RestaurarInscricoesDisciplinas)))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RestaurarInscricoesDisciplinas)
                    .addComponent(SelecionarIdDisciplinaInscrever, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelecionarIdCursoInscrever1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelecionarIdInscricao1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InscreverDisciplina)
                    .addComponent(EliminarDisciplinaInscricao)
                    .addComponent(ListarDisciplinasInscritas))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ListarCursosInscrever1)
                    .addComponent(ListarDisciplinasInscrever))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limparDisciplinasInscrever)
                .addGap(260, 260, 260))
        );

        Janelas.addTab("Adicionar disciplina em curso", jPanel6);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Janelas)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Janelas, javax.swing.GroupLayout.PREFERRED_SIZE, 440, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void ListarDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarDisciplinasActionPerformed
        if (asDisciplinas.size() == 0) {
            resDisciplina.append("N√£o existem disciplinas." + "\n");
        } else {
            for (int x = 0; x < asDisciplinas.size(); x++) {
                resDisciplina.append("-----------------------------------------------" + "\n");
                resDisciplina.append("\n" + "ID da disciplina: " + (asDisciplinas.size() / asDisciplinas.size() + x) + "\n");
                resDisciplina.append("Nome: " + asDisciplinas.get(x).getNomeDisciplina() + "\n");
                resDisciplina.append("Horas: " + String.valueOf(asDisciplinas.get(x).getHorasDisciplina()) + "\n");
                resDisciplina.append("\n");
            }
            resDisciplina.append("-----------------------------------------------" + "\n");
        }
    }//GEN-LAST:event_ListarDisciplinasActionPerformed

    private void EliminarDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarDisciplinaActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\disciplina.txt");
            if (asDisciplinas.size() == 0) {
                resDisciplina.append("N√£o existem disciplinas." + "\n");
            } else {
                int idDisciplina = (int) SelecionarIdDisciplina.getValue();
                if (idDisciplina <= 0 || idDisciplina > asDisciplinas.size()) {
                    resDisciplina.append("A disciplina com o ID " + idDisciplina + " n√£o existe." + "\n");
                } else {
                    asDisciplinas.get(idDisciplina - 1);
                    asDisciplinas.remove(idDisciplina - 1);
                    resDisciplina.append("Disciplina " + (idDisciplina) + " eliminada com sucesso." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(asDisciplinas);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EliminarDisciplinaActionPerformed

    private void ModificarDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarDisciplinaActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\disciplina.txt");
            if (asDisciplinas.size() == 0) {
                resDisciplina.append("N√£o existem disciplinas." + "\n");
            } else {
                int idDisciplina = (int) SelecionarIdDisciplina.getValue();
                if (idDisciplina <= 0 || idDisciplina > asDisciplinas.size()) {
                    resDisciplina.append("A disciplina com o ID " + idDisciplina + " n√£o existe." + "\n");
                } else {
                    asDisciplinas.get(idDisciplina - 1);
                    Disciplinas disciplinas = new Disciplinas();
                    disciplinas.setIdDisciplina(idDisciplina);
                    disciplinas.setNomeDisciplina(nomeDisciplina.getText());
                    disciplinas.setHorasDisciplina(Integer.parseInt(HorasDisciplina.getText()));
                    asDisciplinas.set(idDisciplina - 1, disciplinas);
                    resDisciplina.append("Disciplina " + (idDisciplina) + " modificada com sucesso." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(asDisciplinas);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_ModificarDisciplinaActionPerformed

    private void limparDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparDisciplinaActionPerformed
        nomeDisciplina.setText("");
        HorasDisciplina.setText("");
        resDisciplina.setText("");
    }//GEN-LAST:event_limparDisciplinaActionPerformed

    private void RestaurarDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestaurarDisciplinasActionPerformed
        FileInputStream fileInputStream = null;
        Disciplinas disciplinas = null;
        int idDisciplina = asDisciplinas.size() + 1;
        try {
            fileInputStream = new FileInputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\disciplina.txt");
            try ( ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {
                asDisciplinas = (ArrayList<Disciplinas>) objectInputStream.readObject();
                if (asDisciplinas.size() == 0) {
                    resDisciplina.append("N√£o existem disciplinas." + "\n");
                } else {
                    resDisciplina.append("Disciplinas restauradas com sucesso." + "\n");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            resDisciplina.append("N√£o existem dados guardados no disco." + "\n");
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                resDisciplina.append("N√£o existem dados guardados no disco." + "\n");
            }
        }
    }//GEN-LAST:event_RestaurarDisciplinasActionPerformed

    private void AdicionarDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarDisciplinaActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\disciplina.txt");
            Disciplinas disciplinas = new Disciplinas();
            disciplinas.setNomeDisciplina(nomeDisciplina.getText());
            disciplinas.setHorasDisciplina(Integer.parseInt(HorasDisciplina.getText()));
            asDisciplinas.add(disciplinas);
            resDisciplina.setText("");
            resDisciplina.append("Disciplina adicionada com sucesso." + "\n");
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(asDisciplinas);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_AdicionarDisciplinaActionPerformed

    private void ListarCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarCursosActionPerformed
        if (osCursos.size() == 0) {
            resCurso.append("N√£o existem cursos." + "\n");
        } else {
            for (int x = 0; x < osCursos.size(); x++) {
                resCurso.append("-----------------------------------------------" + "\n");
                resCurso.append("\n" + "ID do curso: " + (osCursos.size() / osCursos.size() + x) + "\n");
                resCurso.append("Nome: " + osCursos.get(x).getNomeCurso() + "\n");
                resCurso.append("Horas: " + String.valueOf(osCursos.get(x).getHorasCurso()) + "\n");
                resCurso.append("\n");
            }
            resCurso.append("-----------------------------------------------" + "\n");
        }
    }//GEN-LAST:event_ListarCursosActionPerformed

    private void EliminarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarCursoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\curso.txt");
            if (osCursos.size() == 0) {
                resCurso.append("N√£o existem cursos." + "\n");
            } else {
                int idCurso = (int) SelecionarIdCurso.getValue();
                if (idCurso <= 0 || idCurso > osCursos.size()) {
                    resCurso.append("O curso com o ID " + idCurso + " n√£o existe." + "\n");
                } else {
                    osCursos.get(idCurso - 1);
                    osCursos.remove(idCurso - 1);
                    resCurso.append("Curso " + (idCurso) + " eliminado com sucesso." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(osCursos);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_EliminarCursoActionPerformed

    private void ModificarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarCursoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\curso.txt");
            if (osCursos.size() == 0) {
                resCurso.append("N√£o existem cursos." + "\n");
            } else {
                int idCurso = (int) SelecionarIdCurso.getValue();
                if (idCurso <= 0 || idCurso > osCursos.size()) {
                    resCurso.append("O curso com o ID " + idCurso + " n√£o existe." + "\n");
                } else {
                    osCursos.get(idCurso - 1);
                    Cursos cursos = new Cursos();
                    cursos.setIdCurso(idCurso);
                    cursos.setNomeCurso(nomeCurso.getText());
                    cursos.setHorasCurso(Integer.parseInt(HorasCurso.getText()));
                    osCursos.set(idCurso - 1, cursos);
                    resCurso.append("Curso " + (idCurso) + " modificado com sucesso." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(osCursos);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_ModificarCursoActionPerformed

    private void LimparCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimparCursoActionPerformed
        nomeCurso.setText("");
        HorasCurso.setText("");
        resCurso.setText("");
    }//GEN-LAST:event_LimparCursoActionPerformed

    private void RestaurarCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestaurarCursosActionPerformed
        FileInputStream fileInputStream = null;
        Cursos cursos = null;
        int idCurso = osCursos.size() + 1;
        try {
            fileInputStream = new FileInputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\curso.txt");
            try ( ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {
                osCursos = (ArrayList<Cursos>) objectInputStream.readObject();
                if (osCursos.size() == 0) {
                    resCurso.append("N√£o existem cursos." + "\n");
                } else {
                    resCurso.append("Cursos restaurados com sucesso." + "\n");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            resCurso.append("N√£o existem dados guardados no disco." + "\n");
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                resCurso.append("N√£o existem dados guardados no disco." + "\n");
            }
        }
    }//GEN-LAST:event_RestaurarCursosActionPerformed

    private void AdicionarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarCursoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\curso.txt");
            Cursos cursos = new Cursos();
            cursos.setNomeCurso(nomeCurso.getText());
            cursos.setHorasCurso(Integer.parseInt(HorasCurso.getText()));
            osCursos.add(cursos);
            resCurso.setText("");
            resCurso.append("Curso adicionado com sucesso." + "\n");
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(osCursos);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_AdicionarCursoActionPerformed

    private void ListarFormandosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarFormandosActionPerformed
        if (osFormandos.size() == 0) {
            resFormando.append("N√£o existem formandos." + "\n");
        } else {
            for (int x = 0; x < osFormandos.size(); x++) {
                resFormando.append("-----------------------------------------------" + "\n");
                resFormando.append("\n" + "ID do formando: " + (osFormandos.size() / osFormandos.size() + x) + "\n");
                resFormando.append("Nome: " + osFormandos.get(x).getNomeFormando() + "\n");
                resFormando.append("Pa√≠s: " + osFormandos.get(x).getPais() + "\n");
                resFormando.append("Ano: " + String.valueOf(osFormandos.get(x).getAno()) + "\n");
                resFormando.append("Altura: " + String.valueOf(osFormandos.get(x).getAltura()) + "\n");
                resFormando.append("\n");
            }
            
            resFormando.append("-----------------------------------------------" + "\n");
    }//GEN-LAST:event_ListarFormandosActionPerformed
    }
    private void EliminarFormandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarFormandoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\formando.txt");
            if (osFormandos.size() == 0) {
                resFormando.append("N√£o existem formandos." + "\n");
            } else {
                int idFormando = (int) SelecionarIdFormando.getValue();
                if (idFormando <= 0 || idFormando > osFormandos.size()) {
                    resFormando.append("O formando com o ID " + idFormando + " n√£o existe." + "\n");
                } else {
                    osFormandos.get(idFormando - 1);
                    osFormandos.remove(idFormando - 1);
                    resFormando.append("Formando " + (idFormando) + " eliminado com sucesso." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(osFormandos);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_EliminarFormandoActionPerformed

    private void ModificarFormandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarFormandoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\formando.txt");
            if (osFormandos.size() == 0) {
                resFormando.append("N√£o existem formandos." + "\n");
            } else {
                int idFormando = (int) SelecionarIdFormando.getValue();
                if (idFormando <= 0 || idFormando > osFormandos.size()) {
                    resFormando.append("O formando com o ID " + idFormando + " n√£o existe." + "\n");
                } else {
                    osFormandos.get(idFormando - 1);
                    Formando formando = new Formando();
                    formando.setIdFormando(idFormando);
                    formando.setNomeFormando(nomeFormando.getText());
                    formando.setPais(pais.getText());
                    formando.setAno(Integer.parseInt(ano.getText()));
                    formando.setAltura(Integer.parseInt(altura.getText()));
                    osFormandos.set(idFormando - 1, formando);
                    resFormando.append("Formando " + (idFormando) + " modificado com sucesso." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(osFormandos);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_ModificarFormandoActionPerformed

    private void RestaurarFormandosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestaurarFormandosActionPerformed
        FileInputStream fileInputStream = null;
        Formando formando = null;
        int idFormando = osFormandos.size() + 1;
        try {
            fileInputStream = new FileInputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\formando.txt");
            try ( ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {
                osFormandos = (ArrayList<Formando>) objectInputStream.readObject();
                if (osFormandos.size() == 0) {
                    resFormando.append("N√£o existem formandos." + "\n");
                } else {
                    resFormando.append("Formandos restaurados com sucesso." + "\n");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }

            //resFormando.append(String.valueOf(osFormandos + "\n"));
            //for (int x = 0; x < osFormandos.size(); x++) {
            //resFormando.append(String.valueOf(osFormandos.get(x) + "\n"));
            //  resFormando.append(osFormandos.get(x) + "\n");
            /*nomeFormando.setText(osFormandos.get(y).getNomeFormando());
                pais.setText(osFormandos.get(y).getPais());
                ano.setText(String.valueOf(osFormandos.get(y).getAno()));
                altura.setText(String.valueOf(osFormandos.get(y).getAltura()));
             */
            //   resFormando.append(String.valueOf(osFormandos.get(x) + "\n"));
            //}
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            resFormando.append("N√£o existem dados guardados no disco." + "\n");
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                resFormando.append("N√£o existem dados guardados no disco." + "\n");
            }
        }
    }//GEN-LAST:event_RestaurarFormandosActionPerformed

    private void AdicionarFormandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarFormandoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\formando.txt");
            //int idFormando = osFormandos.size() + 1;
            Formando formando = new Formando();
            formando.setNomeFormando(nomeFormando.getText());
            formando.setPais(pais.getText());
            formando.setAno(Integer.parseInt(ano.getText()));
            formando.setAltura(Integer.parseInt(altura.getText()));
            //formando.setIdFormando(idFormando++);
            osFormandos.add(formando);
            resFormando.setText("");
            //int x = osFormandos.size();
            resFormando.append("Formando adicionado com sucesso." + "\n");
            //for (int x=0; x == osFormandos.size(); x++) {
            //    resFormando.append(String.valueOf("Formando adicionado com sucesso. Registado com o ID n.¬∫ : " + osFormandos.get(x).getIdFormando() + "\n"));
            //}
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(osFormandos);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_AdicionarFormandoActionPerformed

    private void LimparFormandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimparFormandoActionPerformed
        // TODO add your handling code here:
        nomeFormando.setText("");
        pais.setText("");
        ano.setText("");
        altura.setText("");
        resFormando.setText("");
    }//GEN-LAST:event_LimparFormandoActionPerformed

    private void nomeFormandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeFormandoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeFormandoActionPerformed

    private void nomeCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeCursoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeCursoActionPerformed

    private void EliminarFormandoInscricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarFormandoInscricaoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\inscreverformando.txt");
            if (osFormandos.size() == 0 || osCursos.size() == 0) {
                resFormandoInscrever.append("N√£o existem formandos e/ou cursos." + "\n");
            } else {
                int idInscricao = (int) SelecionarIdInscricao.getValue();
                if (idInscricao <= 0 || idInscricao > asInsForm.size()) {
                    resFormandoInscrever.append("A inscri√ß√£o com o ID " + idInscricao + " n√£o existe." + "\n");
                } else {
                    asInsForm.get(idInscricao - 1);
                    asInsForm.remove(idInscricao - 1);
                    resFormandoInscrever.append("Inscri√ß√£o " + (idInscricao) + " eliminada com sucesso." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(asInsForm);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_EliminarFormandoInscricaoActionPerformed

    private void InscreverFormandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InscreverFormandoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\inscreverformando.txt");
            if (osFormandos.size() == 0 || osCursos.size() == 0) {
                resFormandoInscrever.append("N√£o existem formandos e/ou cursos." + "\n");
            } else {
                int idFormando = (int) SelecionarIdFormandoInscrever.getValue();
                int idCurso = (int) SelecionarIdCursoInscrever.getValue();
                if (idFormando <= 0 || idFormando > osFormandos.size() || idCurso <= 0 || idCurso > osCursos.size()) {
                    resFormandoInscrever.append("N√£o existe formando e/ou curso com esse ID. Por favor selecione um ID v√°lido." + "\n");
                } else {
                    osFormandos.get(idFormando - 1);
                    osCursos.get(idCurso - 1);
                    InscricaoFormando inscricaoFormando = new InscricaoFormando();
                    inscricaoFormando.setIdFormando(idFormando);
                    inscricaoFormando.setIdCurso(idCurso);
                    asInsForm.add(inscricaoFormando);
                    resFormandoInscrever.append("Formando " + (idFormando) + " adicionado ao curso " + idCurso + "." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(asInsForm);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_InscreverFormandoActionPerformed

    private void RestaurarInscricoesFormandosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestaurarInscricoesFormandosActionPerformed
        FileInputStream fileInputStream = null;
        InscricaoFormando inscricaoFormando = null;
        int idInscricaoFormando = asInsForm.size() + 1;
        try {
            fileInputStream = new FileInputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\inscreverformando.txt");
            try ( ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {
                asInsForm = (ArrayList<InscricaoFormando>) objectInputStream.readObject();
                if (asInsForm.size() == 0) {
                    resFormandoInscrever.append("N√£o existem inscri√ß√µes de formandos em cursos." + "\n");
                } else {
                    resFormandoInscrever.append("Inscri√ß√µes de formandos em cursos restauradas com sucesso." + "\n");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            resFormandoInscrever.append("N√£o existem dados guardados no disco." + "\n");
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                resFormandoInscrever.append("N√£o existem dados guardados no disco." + "\n");
            }
        }
    }//GEN-LAST:event_RestaurarInscricoesFormandosActionPerformed

    private void ListarFormandosInscreverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarFormandosInscreverActionPerformed
        if (osFormandos.size() == 0) {
            resFormandoInscrever.append("N√£o existem formandos." + "\n");
        } else {
            for (int x = 0; x < osFormandos.size(); x++) {
                resFormandoInscrever.append("-----------------------------------------------" + "\n");
                resFormandoInscrever.append("\n" + "ID do formando: " + (osFormandos.size() / osFormandos.size() + x) + "\n");
                resFormandoInscrever.append("Nome: " + osFormandos.get(x).getNomeFormando() + "\n");
                resFormandoInscrever.append("Pa√≠s: " + osFormandos.get(x).getPais() + "\n");
                resFormandoInscrever.append("Ano: " + String.valueOf(osFormandos.get(x).getAno()) + "\n");
                resFormandoInscrever.append("Altura: " + String.valueOf(osFormandos.get(x).getAltura()) + "\n");
                resFormandoInscrever.append("\n");
            }
            
            resFormandoInscrever.append("-----------------------------------------------" + "\n");
        }
    }//GEN-LAST:event_ListarFormandosInscreverActionPerformed

    private void ListarFormandosInscritosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarFormandosInscritosActionPerformed
        if (asInsForm.size() == 0) {
            resFormandoInscrever.append("N√£o existem formandos inscritos em cursos." + "\n");
        } else {
            for (int x = 0; x < asInsForm.size(); x++) {
                resFormandoInscrever.append("---------------------------------------------------------------" + "\n");
                resFormandoInscrever.append("ID da inscri√ß√£o: " + (asInsForm.size() / asInsForm.size() + x) + "\n");
                resFormandoInscrever.append(String.valueOf(asInsForm.get(x)));
                resFormandoInscrever.append("\n");
            }
            
            resFormandoInscrever.append("---------------------------------------------------------------" + "\n");
        }
    }//GEN-LAST:event_ListarFormandosInscritosActionPerformed

    private void ListarCursosInscreverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarCursosInscreverActionPerformed
        if (osCursos.size() == 0) {
            resFormandoInscrever.append("N√£o existem cursos." + "\n");
        } else {
            for (int x = 0; x < osCursos.size(); x++) {
                resFormandoInscrever.append("-----------------------------------------------" + "\n");
                resFormandoInscrever.append("\n" + "ID do curso: " + (osCursos.size() / osCursos.size() + x) + "\n");
                resFormandoInscrever.append("Nome: " + osCursos.get(x).getNomeCurso() + "\n");
                resFormandoInscrever.append("Horas: " + String.valueOf(osCursos.get(x).getHorasCurso()) + "\n");
                resFormandoInscrever.append("\n");
            }
            resFormandoInscrever.append("-----------------------------------------------" + "\n");
        }
    }//GEN-LAST:event_ListarCursosInscreverActionPerformed

    private void limparFormandoInscreverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparFormandoInscreverActionPerformed
        resFormandoInscrever.setText("");
    }//GEN-LAST:event_limparFormandoInscreverActionPerformed

    private void EliminarDisciplinaInscricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarDisciplinaInscricaoActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\inscreverdisciplina.txt");
            if (asDisciplinas.size() == 0 || osCursos.size() == 0) {
                resDisciplinasInscrever.append("N√£o existem disciplinas e/ou cursos." + "\n");
            } else {
                int idInscricao = (int) SelecionarIdInscricao1.getValue();
                if (idInscricao <= 0 || idInscricao > asInsDis.size()) {
                    resDisciplinasInscrever.append("A inscri√ß√£o com o ID " + idInscricao + " n√£o existe." + "\n");
                } else {
                    asInsDis.get(idInscricao - 1);
                    asInsDis.remove(idInscricao - 1);
                    resDisciplinasInscrever.append("Inscri√ß√£o " + (idInscricao) + " eliminada com sucesso." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(asInsDis);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_EliminarDisciplinaInscricaoActionPerformed

    private void RestaurarInscricoesDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestaurarInscricoesDisciplinasActionPerformed
        FileInputStream fileInputStream = null;
        InscricaoDisciplina inscricaoDisciplina = null;
        int idInscricaoDisciplina = asInsDis.size() + 1;
        try {
            fileInputStream = new FileInputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\inscreverdisciplina.txt");
            try ( ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {
                asInsDis = (ArrayList<InscricaoDisciplina>) objectInputStream.readObject();
                if (asInsDis.size() == 0) {
                    resDisciplinasInscrever.append("N√£o existem inscri√ß√µes de disciplinas em cursos." + "\n");
                } else {
                    resDisciplinasInscrever.append("Inscri√ß√µes de disciplinas em cursos restauradas com sucesso." + "\n");
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            resDisciplinasInscrever.append("N√£o existem dados guardados no disco." + "\n");
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                resDisciplinasInscrever.append("N√£o existem dados guardados no disco." + "\n");
            }
        }
    }//GEN-LAST:event_RestaurarInscricoesDisciplinasActionPerformed

    private void limparDisciplinasInscreverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparDisciplinasInscreverActionPerformed
        resDisciplinasInscrever.setText("");
    }//GEN-LAST:event_limparDisciplinasInscreverActionPerformed

    private void ListarCursosInscrever1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarCursosInscrever1ActionPerformed
        if (osCursos.size() == 0) {
            resDisciplinasInscrever.append("N√£o existem cursos." + "\n");
        } else {
            for (int x = 0; x < osCursos.size(); x++) {
                resDisciplinasInscrever.append("-----------------------------------------------" + "\n");
                resDisciplinasInscrever.append("\n" + "ID do curso: " + (osCursos.size() / osCursos.size() + x) + "\n");
                resDisciplinasInscrever.append("Nome: " + osCursos.get(x).getNomeCurso() + "\n");
                resDisciplinasInscrever.append("Horas: " + String.valueOf(osCursos.get(x).getHorasCurso()) + "\n");
                resDisciplinasInscrever.append("\n");
            }
            resDisciplinasInscrever.append("-----------------------------------------------" + "\n");
        }
    }//GEN-LAST:event_ListarCursosInscrever1ActionPerformed

    private void ListarDisciplinasInscritasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarDisciplinasInscritasActionPerformed
         if (asInsDis.size() == 0) {
            resDisciplinasInscrever.append("N√£o existem disciplinas inscritas em cursos." + "\n");
        } else {
            for (int x = 0; x < asInsDis.size(); x++) {
                resDisciplinasInscrever.append("---------------------------------------------------------------" + "\n");
                resDisciplinasInscrever.append("ID da inscri√ß√£o: " + (asInsDis.size() / asInsDis.size() + x) + "\n");
                resDisciplinasInscrever.append(String.valueOf(asInsDis.get(x)));
                resDisciplinasInscrever.append("\n");
            }
            
            resDisciplinasInscrever.append("---------------------------------------------------------------" + "\n");
        }
    }//GEN-LAST:event_ListarDisciplinasInscritasActionPerformed

    private void ListarDisciplinasInscreverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarDisciplinasInscreverActionPerformed
        if (asDisciplinas.size() == 0) {
            resDisciplinasInscrever.append("N√£o existem disciplinas." + "\n");
        } else {
            for (int x = 0; x < asDisciplinas.size(); x++) {
                resDisciplinasInscrever.append("-----------------------------------------------" + "\n");
                resDisciplinasInscrever.append("\n" + "ID da disciplina: " + (asDisciplinas.size() / asDisciplinas.size() + x) + "\n");
                resDisciplinasInscrever.append("Nome: " + asDisciplinas.get(x).getNomeDisciplina() + "\n");
                resDisciplinasInscrever.append("Horas: " + String.valueOf(asDisciplinas.get(x).getHorasDisciplina()) + "\n");
                resDisciplinasInscrever.append("\n");
            }
            resDisciplinasInscrever.append("-----------------------------------------------" + "\n");
        }
    }//GEN-LAST:event_ListarDisciplinasInscreverActionPerformed

    private void InscreverDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InscreverDisciplinaActionPerformed
        FileInputStream fileInputStream = null;
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("C:\\Users\\edgar\\AppData\\Local\\Temp\\inscreverdisciplina.txt");
            if (asDisciplinas.size() == 0 || osCursos.size() == 0) {
                resDisciplinasInscrever.append("N√£o existem disciplinas e/ou cursos." + "\n");
            } else {
                int idDisciplina = (int) SelecionarIdDisciplinaInscrever.getValue();
                int idCurso = (int) SelecionarIdCursoInscrever1.getValue();
                if (idDisciplina <= 0 || idDisciplina > asDisciplinas.size() || idCurso <= 0 || idCurso > osCursos.size()) {
                    resDisciplinasInscrever.append("N√£o existe disciplina e/ou curso com esse ID. Por favor selecione um ID v√°lido." + "\n");
                } else {
                    asDisciplinas.get(idDisciplina - 1);
                    osCursos.get(idCurso - 1);
                    InscricaoDisciplina inscricaoDisciplina = new InscricaoDisciplina();
                    inscricaoDisciplina.setIdDisciplina(idDisciplina);
                    inscricaoDisciplina.setIdCurso(idCurso);
                    asInsDis.add(inscricaoDisciplina);
                    resDisciplinasInscrever.append("Disciplina " + (idDisciplina) + " adicionada ao curso " + idCurso + "." + "\n");
                }
            }
            try ( ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(asInsDis);
                objectOutputStream.flush();
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }//GEN-LAST:event_InscreverDisciplinaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                    
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdicionarCurso;
    private javax.swing.JButton AdicionarDisciplina;
    private javax.swing.JButton AdicionarFormando;
    private javax.swing.JButton EliminarCurso;
    private javax.swing.JButton EliminarDisciplina;
    private javax.swing.JButton EliminarDisciplinaInscricao;
    private javax.swing.JButton EliminarFormando;
    private javax.swing.JButton EliminarFormandoInscricao;
    private javax.swing.JTextField HorasCurso;
    private javax.swing.JTextField HorasDisciplina;
    private javax.swing.JButton InscreverDisciplina;
    private javax.swing.JButton InscreverFormando;
    private javax.swing.JTabbedPane Janelas;
    private javax.swing.JButton LimparCurso;
    private javax.swing.JButton LimparFormando;
    private javax.swing.JButton ListarCursos;
    private javax.swing.JButton ListarCursosInscrever;
    private javax.swing.JButton ListarCursosInscrever1;
    private javax.swing.JButton ListarDisciplinas;
    private javax.swing.JButton ListarDisciplinasInscrever;
    private javax.swing.JButton ListarDisciplinasInscritas;
    private javax.swing.JButton ListarFormandos;
    private javax.swing.JButton ListarFormandosInscrever;
    private javax.swing.JButton ListarFormandosInscritos;
    private javax.swing.JButton ModificarCurso;
    private javax.swing.JButton ModificarDisciplina;
    private javax.swing.JButton ModificarFormando;
    private javax.swing.JButton RestaurarCursos;
    private javax.swing.JButton RestaurarDisciplinas;
    private javax.swing.JButton RestaurarFormandos;
    private javax.swing.JButton RestaurarInscricoesDisciplinas;
    private javax.swing.JButton RestaurarInscricoesFormandos;
    private javax.swing.JSpinner SelecionarIdCurso;
    private javax.swing.JSpinner SelecionarIdCursoInscrever;
    private javax.swing.JSpinner SelecionarIdCursoInscrever1;
    private javax.swing.JSpinner SelecionarIdDisciplina;
    private javax.swing.JSpinner SelecionarIdDisciplinaInscrever;
    private javax.swing.JSpinner SelecionarIdFormando;
    private javax.swing.JSpinner SelecionarIdFormandoInscrever;
    private javax.swing.JSpinner SelecionarIdInscricao;
    private javax.swing.JSpinner SelecionarIdInscricao1;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JTextField altura;
    private javax.swing.JTextField ano;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton limparDisciplina;
    private javax.swing.JButton limparDisciplinasInscrever;
    private javax.swing.JButton limparFormandoInscrever;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField nomeCurso;
    private javax.swing.JTextField nomeDisciplina;
    private javax.swing.JTextField nomeFormando;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTextField pais;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JTextArea resCurso;
    private javax.swing.JTextArea resDisciplina;
    private javax.swing.JTextArea resDisciplinasInscrever;
    private javax.swing.JTextArea resFormando;
    private javax.swing.JTextArea resFormandoInscrever;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
